$date
	Mon May 24 07:29:39 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module BancoPrueba_2 $end
$var wire 1 ! validOut5 $end
$var wire 1 " validOut4 $end
$var wire 1 # validOut3 $end
$var wire 1 $ validOut2 $end
$var wire 1 % validOut1 $end
$var wire 1 & validOut0 $end
$var wire 1 ' validIn1 $end
$var wire 1 ( validIn0 $end
$var wire 1 ) selector $end
$var wire 1 * reset $end
$var wire 8 + dataOut5 [7:0] $end
$var wire 8 , dataOut4 [7:0] $end
$var wire 8 - dataOut3 [7:0] $end
$var wire 8 . dataOut2 [7:0] $end
$var wire 8 / dataOut1 [7:0] $end
$var wire 8 0 dataOut0 [7:0] $end
$var wire 8 1 dataIn1 [7:0] $end
$var wire 8 2 dataIn0 [7:0] $end
$var wire 1 3 clk_2 $end
$var wire 1 4 clk_1 $end
$scope module L1 $end
$var wire 1 # validOut3 $end
$var wire 1 $ validOut2 $end
$var wire 1 % validOut1 $end
$var wire 1 & validOut0 $end
$var wire 1 ' validIn1 $end
$var wire 1 ( validIn0 $end
$var wire 1 ) selector $end
$var wire 1 * reset $end
$var wire 8 5 dataOut3 [7:0] $end
$var wire 8 6 dataOut2 [7:0] $end
$var wire 8 7 dataOut1 [7:0] $end
$var wire 8 8 dataOut0 [7:0] $end
$var wire 8 9 dataIn1 [7:0] $end
$var wire 8 : dataIn0 [7:0] $end
$var wire 1 4 clk $end
$scope module Demux1 $end
$var wire 1 ( validIn $end
$var wire 1 ) selector $end
$var wire 1 * reset $end
$var wire 8 ; dataIn [7:0] $end
$var wire 1 4 clk $end
$var reg 8 < dataOut0 [7:0] $end
$var reg 8 = dataOut1 [7:0] $end
$var reg 8 > out0 [7:0] $end
$var reg 8 ? out1 [7:0] $end
$var reg 1 @ validDeMux0 $end
$var reg 1 A validDeMux1 $end
$var reg 1 & validOut0 $end
$var reg 1 % validOut1 $end
$upscope $end
$scope module Demux2 $end
$var wire 1 ' validIn $end
$var wire 1 ) selector $end
$var wire 1 * reset $end
$var wire 8 B dataIn [7:0] $end
$var wire 1 4 clk $end
$var reg 8 C dataOut0 [7:0] $end
$var reg 8 D dataOut1 [7:0] $end
$var reg 8 E out0 [7:0] $end
$var reg 8 F out1 [7:0] $end
$var reg 1 G validDeMux0 $end
$var reg 1 H validDeMux1 $end
$var reg 1 $ validOut0 $end
$var reg 1 # validOut1 $end
$upscope $end
$upscope $end
$scope module L2 $end
$var wire 1 ! validOut1 $end
$var wire 1 " validOut0 $end
$var wire 1 ( validIn $end
$var wire 1 ) selector $end
$var wire 1 * reset $end
$var wire 8 I dataOut1 [7:0] $end
$var wire 8 J dataOut0 [7:0] $end
$var wire 8 K dataIn [7:0] $end
$var wire 1 4 clk $end
$scope module Demux $end
$var wire 1 ( validIn $end
$var wire 1 ) selector $end
$var wire 1 * reset $end
$var wire 8 L dataIn [7:0] $end
$var wire 1 4 clk $end
$var reg 8 M dataOut0 [7:0] $end
$var reg 8 N dataOut1 [7:0] $end
$var reg 8 O out0 [7:0] $end
$var reg 8 P out1 [7:0] $end
$var reg 1 Q validDeMux0 $end
$var reg 1 R validDeMux1 $end
$var reg 1 " validOut0 $end
$var reg 1 ! validOut1 $end
$upscope $end
$upscope $end
$scope module probador $end
$var wire 8 S dataOut0 [7:0] $end
$var wire 8 T dataOut1 [7:0] $end
$var wire 8 U dataOut2 [7:0] $end
$var wire 8 V dataOut3 [7:0] $end
$var wire 8 W dataOut4 [7:0] $end
$var wire 8 X dataOut5 [7:0] $end
$var wire 1 & validOut0 $end
$var wire 1 % validOut1 $end
$var wire 1 $ validOut2 $end
$var wire 1 # validOut3 $end
$var wire 1 " validOut4 $end
$var wire 1 ! validOut5 $end
$var reg 1 4 clk_1 $end
$var reg 1 3 clk_2 $end
$var reg 8 Y dataIn0 [7:0] $end
$var reg 8 Z dataIn1 [7:0] $end
$var reg 1 * reset $end
$var reg 1 ) selector $end
$var reg 1 ( validIn0 $end
$var reg 1 ' validIn1 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 Z
b0 Y
bx X
bx W
bx V
bx U
bx T
bx S
xR
0Q
bx P
b0 O
bx N
bx M
b0 L
b0 K
bx J
bx I
xH
0G
bx F
b0 E
bx D
bx C
b0 B
xA
0@
bx ?
b0 >
bx =
bx <
b0 ;
b0 :
b0 9
bx 8
bx 7
bx 6
bx 5
04
03
b0 2
b0 1
bx 0
bx /
bx .
bx -
bx ,
bx +
0*
0)
0(
0'
x&
x%
x$
x#
x"
x!
$end
#1
13
#2
b0 /
b0 7
b0 =
b0 T
b0 0
b0 8
b0 <
b0 S
b0 -
b0 5
b0 D
b0 V
b0 .
b0 6
b0 C
b0 U
b0 +
b0 I
b0 N
b0 X
b0 ,
b0 J
b0 M
b0 W
1*
03
14
#3
13
#4
03
04
#5
13
#6
1G
b10101 E
1@
b11111111 >
1Q
b11111111 O
1'
1(
b10101 1
b10101 9
b10101 B
b10101 Z
b11111111 2
b11111111 :
b11111111 ;
b11111111 K
b11111111 L
b11111111 Y
03
14
#7
13
#8
03
04
#9
13
#10
1&
b11111111 0
b11111111 8
b11111111 <
b11111111 S
1$
b10101 .
b10101 6
b10101 C
b10101 U
1"
b11111111 ,
b11111111 J
b11111111 M
b11111111 W
03
14
#11
13
#12
03
04
#13
13
#14
03
14
#15
13
#16
03
04
#17
13
#18
1R
b11111111 P
1A
b11111111 ?
1H
b10101 F
1)
03
14
#19
13
#20
03
04
#21
13
#22
0H
0A
0R
0'
0(
1!
b11111111 +
b11111111 I
b11111111 N
b11111111 X
1#
b10101 -
b10101 5
b10101 D
b10101 V
1%
b11111111 /
b11111111 7
b11111111 =
b11111111 T
03
14
#23
13
#24
03
04
#25
13
#26
03
14
#27
13
#28
03
04
#29
13
#30
0Q
0@
0G
0)
03
14
