/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "DeMux2x1.v:1" *)
module DeMux2x1_L1(dataOut0, dataOut1, validOut0, validOut1, dataIn, validIn, clk, reset);
  (* src = "DeMux2x1.v:43" *)
  wire [7:0] _000_;
  (* src = "DeMux2x1.v:60" *)
  wire [7:0] _001_;
  (* src = "DeMux2x1.v:18" *)
  wire _002_;
  (* src = "DeMux2x1.v:43" *)
  wire _003_;
  (* src = "DeMux2x1.v:60" *)
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  (* src = "DeMux2x1.v:9" *)
  input clk;
  (* src = "DeMux2x1.v:6" *)
  input [7:0] dataIn;
  (* src = "DeMux2x1.v:2" *)
  output [7:0] dataOut0;
  (* src = "DeMux2x1.v:3" *)
  output [7:0] dataOut1;
  (* init = 8'h00 *)
  (* src = "DeMux2x1.v:12" *)
  (* unused_bits = "0 1 2 3 4 5 6 7" *)
  wire [7:0] out0;
  (* init = 8'h00 *)
  (* src = "DeMux2x1.v:13" *)
  (* unused_bits = "0 1 2 3 4 5 6 7" *)
  wire [7:0] out1;
  (* src = "DeMux2x1.v:10" *)
  input reset;
  (* src = "DeMux2x1.v:16" *)
  wire selector;
  (* init = 1'h0 *)
  (* src = "DeMux2x1.v:14" *)
  (* unused_bits = "0" *)
  wire validDeMux0;
  (* init = 1'h0 *)
  (* src = "DeMux2x1.v:15" *)
  (* unused_bits = "0" *)
  wire validDeMux1;
  (* src = "DeMux2x1.v:7" *)
  input validIn;
  (* src = "DeMux2x1.v:4" *)
  output validOut0;
  (* src = "DeMux2x1.v:5" *)
  output validOut1;
  NOT _073_ (
    .A(reset),
    .Y(_031_)
  );
  NOT _074_ (
    .A(validIn),
    .Y(_032_)
  );
  NOT _075_ (
    .A(selector),
    .Y(_033_)
  );
  NOT _076_ (
    .A(dataIn[0]),
    .Y(_034_)
  );
  NOT _077_ (
    .A(dataIn[1]),
    .Y(_035_)
  );
  NOT _078_ (
    .A(dataIn[2]),
    .Y(_036_)
  );
  NOT _079_ (
    .A(dataIn[3]),
    .Y(_037_)
  );
  NOT _080_ (
    .A(dataIn[4]),
    .Y(_038_)
  );
  NOT _081_ (
    .A(dataIn[5]),
    .Y(_039_)
  );
  NOT _082_ (
    .A(dataIn[6]),
    .Y(_040_)
  );
  NOT _083_ (
    .A(dataIn[7]),
    .Y(_041_)
  );
  NOR _084_ (
    .A(validOut1),
    .B(selector),
    .Y(_042_)
  );
  NOR _085_ (
    .A(validIn),
    .B(_033_),
    .Y(_043_)
  );
  NOR _086_ (
    .A(_042_),
    .B(_043_),
    .Y(_044_)
  );
  NOR _087_ (
    .A(_032_),
    .B(_033_),
    .Y(_045_)
  );
  NOR _088_ (
    .A(dataOut1[0]),
    .B(_045_),
    .Y(_046_)
  );
  NAND _089_ (
    .A(_034_),
    .B(_045_),
    .Y(_047_)
  );
  NAND _090_ (
    .A(reset),
    .B(_047_),
    .Y(_048_)
  );
  NOR _091_ (
    .A(_046_),
    .B(_048_),
    .Y(_001_[0])
  );
  NOR _092_ (
    .A(dataOut1[1]),
    .B(_045_),
    .Y(_049_)
  );
  NAND _093_ (
    .A(_035_),
    .B(_045_),
    .Y(_050_)
  );
  NAND _094_ (
    .A(reset),
    .B(_050_),
    .Y(_051_)
  );
  NOR _095_ (
    .A(_049_),
    .B(_051_),
    .Y(_001_[1])
  );
  NOR _096_ (
    .A(dataOut1[2]),
    .B(_045_),
    .Y(_052_)
  );
  NAND _097_ (
    .A(_036_),
    .B(_045_),
    .Y(_053_)
  );
  NAND _098_ (
    .A(reset),
    .B(_053_),
    .Y(_054_)
  );
  NOR _099_ (
    .A(_052_),
    .B(_054_),
    .Y(_001_[2])
  );
  NOR _100_ (
    .A(dataOut1[3]),
    .B(_045_),
    .Y(_055_)
  );
  NAND _101_ (
    .A(_037_),
    .B(_045_),
    .Y(_056_)
  );
  NAND _102_ (
    .A(reset),
    .B(_056_),
    .Y(_057_)
  );
  NOR _103_ (
    .A(_055_),
    .B(_057_),
    .Y(_001_[3])
  );
  NOR _104_ (
    .A(dataOut1[4]),
    .B(_045_),
    .Y(_058_)
  );
  NAND _105_ (
    .A(_038_),
    .B(_045_),
    .Y(_059_)
  );
  NAND _106_ (
    .A(reset),
    .B(_059_),
    .Y(_060_)
  );
  NOR _107_ (
    .A(_058_),
    .B(_060_),
    .Y(_001_[4])
  );
  NOR _108_ (
    .A(dataOut1[5]),
    .B(_045_),
    .Y(_061_)
  );
  NAND _109_ (
    .A(_039_),
    .B(_045_),
    .Y(_062_)
  );
  NAND _110_ (
    .A(reset),
    .B(_062_),
    .Y(_063_)
  );
  NOR _111_ (
    .A(_061_),
    .B(_063_),
    .Y(_001_[5])
  );
  NOR _112_ (
    .A(dataOut1[6]),
    .B(_045_),
    .Y(_064_)
  );
  NAND _113_ (
    .A(_040_),
    .B(_045_),
    .Y(_065_)
  );
  NAND _114_ (
    .A(reset),
    .B(_065_),
    .Y(_066_)
  );
  NOR _115_ (
    .A(_064_),
    .B(_066_),
    .Y(_001_[6])
  );
  NOR _116_ (
    .A(dataOut1[7]),
    .B(_045_),
    .Y(_067_)
  );
  NAND _117_ (
    .A(_041_),
    .B(_045_),
    .Y(_068_)
  );
  NAND _118_ (
    .A(reset),
    .B(_068_),
    .Y(_069_)
  );
  NOR _119_ (
    .A(_067_),
    .B(_069_),
    .Y(_001_[7])
  );
  NOR _120_ (
    .A(_032_),
    .B(selector),
    .Y(_070_)
  );
  NAND _121_ (
    .A(reset),
    .B(selector),
    .Y(_002_)
  );
  NAND _122_ (
    .A(selector),
    .B(validOut0),
    .Y(_071_)
  );
  NOT _123_ (
    .A(_071_),
    .Y(_072_)
  );
  NOR _124_ (
    .A(_070_),
    .B(_072_),
    .Y(_005_)
  );
  NOR _125_ (
    .A(_031_),
    .B(_005_),
    .Y(_003_)
  );
  NOR _126_ (
    .A(dataOut0[0]),
    .B(_070_),
    .Y(_006_)
  );
  NAND _127_ (
    .A(_034_),
    .B(_070_),
    .Y(_007_)
  );
  NAND _128_ (
    .A(reset),
    .B(_007_),
    .Y(_008_)
  );
  NOR _129_ (
    .A(_006_),
    .B(_008_),
    .Y(_000_[0])
  );
  NOR _130_ (
    .A(dataOut0[1]),
    .B(_070_),
    .Y(_009_)
  );
  NAND _131_ (
    .A(_035_),
    .B(_070_),
    .Y(_010_)
  );
  NAND _132_ (
    .A(reset),
    .B(_010_),
    .Y(_011_)
  );
  NOR _133_ (
    .A(_009_),
    .B(_011_),
    .Y(_000_[1])
  );
  NOR _134_ (
    .A(dataOut0[2]),
    .B(_070_),
    .Y(_012_)
  );
  NAND _135_ (
    .A(_036_),
    .B(_070_),
    .Y(_013_)
  );
  NAND _136_ (
    .A(reset),
    .B(_013_),
    .Y(_014_)
  );
  NOR _137_ (
    .A(_012_),
    .B(_014_),
    .Y(_000_[2])
  );
  NOR _138_ (
    .A(dataOut0[3]),
    .B(_070_),
    .Y(_015_)
  );
  NAND _139_ (
    .A(_037_),
    .B(_070_),
    .Y(_016_)
  );
  NAND _140_ (
    .A(reset),
    .B(_016_),
    .Y(_017_)
  );
  NOR _141_ (
    .A(_015_),
    .B(_017_),
    .Y(_000_[3])
  );
  NOR _142_ (
    .A(dataOut0[4]),
    .B(_070_),
    .Y(_018_)
  );
  NAND _143_ (
    .A(_038_),
    .B(_070_),
    .Y(_019_)
  );
  NAND _144_ (
    .A(reset),
    .B(_019_),
    .Y(_020_)
  );
  NOR _145_ (
    .A(_018_),
    .B(_020_),
    .Y(_000_[4])
  );
  NOR _146_ (
    .A(dataOut0[5]),
    .B(_070_),
    .Y(_021_)
  );
  NAND _147_ (
    .A(_039_),
    .B(_070_),
    .Y(_022_)
  );
  NAND _148_ (
    .A(reset),
    .B(_022_),
    .Y(_023_)
  );
  NOR _149_ (
    .A(_021_),
    .B(_023_),
    .Y(_000_[5])
  );
  NOR _150_ (
    .A(dataOut0[6]),
    .B(_070_),
    .Y(_024_)
  );
  NAND _151_ (
    .A(_040_),
    .B(_070_),
    .Y(_025_)
  );
  NAND _152_ (
    .A(reset),
    .B(_025_),
    .Y(_026_)
  );
  NOR _153_ (
    .A(_024_),
    .B(_026_),
    .Y(_000_[6])
  );
  NOR _154_ (
    .A(dataOut0[7]),
    .B(_070_),
    .Y(_027_)
  );
  NAND _155_ (
    .A(_041_),
    .B(_070_),
    .Y(_028_)
  );
  NAND _156_ (
    .A(reset),
    .B(_028_),
    .Y(_029_)
  );
  NOR _157_ (
    .A(_027_),
    .B(_029_),
    .Y(_000_[7])
  );
  NAND _158_ (
    .A(reset),
    .B(_044_),
    .Y(_030_)
  );
  NOT _159_ (
    .A(_030_),
    .Y(_004_)
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _160_ (
    .C(clk),
    .D(_001_[0]),
    .Q(dataOut1[0])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _161_ (
    .C(clk),
    .D(_001_[1]),
    .Q(dataOut1[1])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _162_ (
    .C(clk),
    .D(_001_[2]),
    .Q(dataOut1[2])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _163_ (
    .C(clk),
    .D(_001_[3]),
    .Q(dataOut1[3])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _164_ (
    .C(clk),
    .D(_001_[4]),
    .Q(dataOut1[4])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _165_ (
    .C(clk),
    .D(_001_[5]),
    .Q(dataOut1[5])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _166_ (
    .C(clk),
    .D(_001_[6]),
    .Q(dataOut1[6])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _167_ (
    .C(clk),
    .D(_001_[7]),
    .Q(dataOut1[7])
  );
  (* src = "DeMux2x1.v:60" *)
  DFF _168_ (
    .C(clk),
    .D(_004_),
    .Q(validOut1)
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _169_ (
    .C(clk),
    .D(_000_[0]),
    .Q(dataOut0[0])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _170_ (
    .C(clk),
    .D(_000_[1]),
    .Q(dataOut0[1])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _171_ (
    .C(clk),
    .D(_000_[2]),
    .Q(dataOut0[2])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _172_ (
    .C(clk),
    .D(_000_[3]),
    .Q(dataOut0[3])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _173_ (
    .C(clk),
    .D(_000_[4]),
    .Q(dataOut0[4])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _174_ (
    .C(clk),
    .D(_000_[5]),
    .Q(dataOut0[5])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _175_ (
    .C(clk),
    .D(_000_[6]),
    .Q(dataOut0[6])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _176_ (
    .C(clk),
    .D(_000_[7]),
    .Q(dataOut0[7])
  );
  (* src = "DeMux2x1.v:43" *)
  DFF _177_ (
    .C(clk),
    .D(_003_),
    .Q(validOut0)
  );
  (* src = "DeMux2x1.v:18" *)
  DFF _178_ (
    .C(clk),
    .D(_002_),
    .Q(selector)
  );
endmodule

(* top =  1  *)
(* src = "DeMuxL1.v:2" *)
module DeMuxL1_s(dataOut0, dataOut1, dataOut2, dataOut3, validOut0, validOut1, validOut2, validOut3, dataIn0, dataIn1, validIn0, validIn1, clk, reset);
  (* src = "DeMuxL1.v:15" *)
  input clk;
  (* src = "DeMuxL1.v:11" *)
  input [7:0] dataIn0;
  (* src = "DeMuxL1.v:12" *)
  input [7:0] dataIn1;
  (* src = "DeMuxL1.v:3" *)
  output [7:0] dataOut0;
  (* src = "DeMuxL1.v:4" *)
  output [7:0] dataOut1;
  (* src = "DeMuxL1.v:5" *)
  output [7:0] dataOut2;
  (* src = "DeMuxL1.v:6" *)
  output [7:0] dataOut3;
  (* src = "DeMuxL1.v:16" *)
  input reset;
  (* src = "DeMuxL1.v:13" *)
  input validIn0;
  (* src = "DeMuxL1.v:14" *)
  input validIn1;
  (* src = "DeMuxL1.v:7" *)
  output validOut0;
  (* src = "DeMuxL1.v:8" *)
  output validOut1;
  (* src = "DeMuxL1.v:9" *)
  output validOut2;
  (* src = "DeMuxL1.v:10" *)
  output validOut3;
  (* module_not_derived = 32'd1 *)
  (* src = "DeMuxL1.v:18" *)
  DeMux2x1 Demux1 (
    .clk(clk),
    .dataIn(dataIn0),
    .dataOut0(dataOut3),
    .dataOut1(dataOut2),
    .reset(reset),
    .validIn(validIn0),
    .validOut0(validOut3),
    .validOut1(validOut2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "DeMuxL1.v:31" *)
  DeMux2x1 Demux2 (
    .clk(clk),
    .dataIn(dataIn1),
    .dataOut0(dataOut0),
    .dataOut1(dataOut1),
    .reset(reset),
    .validIn(validIn1),
    .validOut0(validOut0),
    .validOut1(validOut1)
  );
endmodule
