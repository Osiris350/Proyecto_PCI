$date
	Sat May 22 19:47:56 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module BancoPrueba_1 $end
$var wire 1 ! validOut2 $end
$var wire 1 " validOut1 $end
$var wire 1 # validOut0 $end
$var wire 1 $ validIn3 $end
$var wire 1 % validIn2 $end
$var wire 1 & validIn1 $end
$var wire 1 ' validIn0 $end
$var wire 1 ( selector $end
$var wire 1 ) reset $end
$var wire 8 * dataOut2 [7:0] $end
$var wire 8 + dataOut1 [7:0] $end
$var wire 8 , dataOut0 [7:0] $end
$var wire 8 - dataIn3 [7:0] $end
$var wire 8 . dataIn2 [7:0] $end
$var wire 8 / dataIn1 [7:0] $end
$var wire 8 0 dataIn0 [7:0] $end
$var wire 1 1 clk_2 $end
$var wire 1 2 clk_1 $end
$scope module L1 $end
$var wire 1 " validOut1 $end
$var wire 1 # validOut0 $end
$var wire 1 $ validIn3 $end
$var wire 1 % validIn2 $end
$var wire 1 & validIn1 $end
$var wire 1 ' validIn0 $end
$var wire 1 ( selector $end
$var wire 1 ) reset $end
$var wire 8 3 dataOut1 [7:0] $end
$var wire 8 4 dataOut0 [7:0] $end
$var wire 8 5 dataIn3 [7:0] $end
$var wire 8 6 dataIn2 [7:0] $end
$var wire 8 7 dataIn1 [7:0] $end
$var wire 8 8 dataIn0 [7:0] $end
$var wire 1 2 clk $end
$scope module mux1 $end
$var wire 1 & validIn1 $end
$var wire 1 ' validIn0 $end
$var wire 1 ( selector $end
$var wire 1 ) reset $end
$var wire 8 9 dataIn1 [7:0] $end
$var wire 8 : dataIn0 [7:0] $end
$var wire 1 2 clk $end
$var reg 8 ; dataOut [7:0] $end
$var reg 8 < out [7:0] $end
$var reg 1 = validMux $end
$var reg 1 # validOut $end
$upscope $end
$scope module mux2 $end
$var wire 1 $ validIn1 $end
$var wire 1 % validIn0 $end
$var wire 1 ( selector $end
$var wire 1 ) reset $end
$var wire 8 > dataIn1 [7:0] $end
$var wire 8 ? dataIn0 [7:0] $end
$var wire 1 2 clk $end
$var reg 8 @ dataOut [7:0] $end
$var reg 8 A out [7:0] $end
$var reg 1 B validMux $end
$var reg 1 " validOut $end
$upscope $end
$upscope $end
$scope module L2 $end
$var wire 1 ! validOut $end
$var wire 1 & validIn1 $end
$var wire 1 ' validIn0 $end
$var wire 1 ( selector $end
$var wire 1 ) reset $end
$var wire 8 C dataOut [7:0] $end
$var wire 8 D dataIn1 [7:0] $end
$var wire 8 E dataIn0 [7:0] $end
$var wire 1 2 clk $end
$scope module mux1 $end
$var wire 1 & validIn1 $end
$var wire 1 ' validIn0 $end
$var wire 1 ( selector $end
$var wire 1 ) reset $end
$var wire 8 F dataIn1 [7:0] $end
$var wire 8 G dataIn0 [7:0] $end
$var wire 1 2 clk $end
$var reg 8 H dataOut [7:0] $end
$var reg 8 I out [7:0] $end
$var reg 1 J validMux $end
$var reg 1 ! validOut $end
$upscope $end
$upscope $end
$scope module probador $end
$var wire 8 K dataOut0 [7:0] $end
$var wire 8 L dataOut1 [7:0] $end
$var wire 8 M dataOut2 [7:0] $end
$var wire 1 # validOut0 $end
$var wire 1 " validOut1 $end
$var wire 1 ! validOut2 $end
$var reg 1 2 clk_1 $end
$var reg 1 1 clk_2 $end
$var reg 8 N dataIn0 [7:0] $end
$var reg 8 O dataIn1 [7:0] $end
$var reg 8 P dataIn2 [7:0] $end
$var reg 8 Q dataIn3 [7:0] $end
$var reg 1 ) reset $end
$var reg 1 ( selector $end
$var reg 1 ' validIn0 $end
$var reg 1 & validIn1 $end
$var reg 1 % validIn2 $end
$var reg 1 $ validIn3 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 Q
b0 P
b0 O
b0 N
bx M
bx L
bx K
0J
b0 I
bx H
b0 G
b0 F
b0 E
b0 D
bx C
0B
b0 A
bx @
b0 ?
b0 >
0=
b0 <
bx ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
bx 4
bx 3
02
01
b0 0
b0 /
b0 .
b0 -
bx ,
bx +
bx *
0)
0(
0'
0&
0%
0$
x#
x"
x!
$end
#1
11
#2
b0 ,
b0 4
b0 ;
b0 K
b0 +
b0 3
b0 @
b0 L
b0 *
b0 C
b0 H
b0 M
1)
01
12
#3
11
#4
01
02
#5
11
#6
1B
b110111 A
1=
b11111111 <
1J
b11111111 I
1$
1%
1&
1'
b1010001 -
b1010001 5
b1010001 >
b1010001 Q
b110111 .
b110111 6
b110111 ?
b110111 P
b10101 /
b10101 7
b10101 9
b10101 D
b10101 F
b10101 O
b11111111 0
b11111111 8
b11111111 :
b11111111 E
b11111111 G
b11111111 N
0!
0"
0#
01
12
#7
11
#8
01
02
#9
11
#10
1#
b11111111 ,
b11111111 4
b11111111 ;
b11111111 K
1"
b110111 +
b110111 3
b110111 @
b110111 L
1!
b11111111 *
b11111111 C
b11111111 H
b11111111 M
01
12
#11
11
#12
01
02
#13
11
#14
01
12
#15
11
#16
01
02
#17
11
#18
b10101 I
b10101 <
b1010001 A
1(
01
12
#19
11
#20
01
02
#21
11
#22
0B
0=
0J
0$
0%
0&
0'
b10101 *
b10101 C
b10101 H
b10101 M
b1010001 +
b1010001 3
b1010001 @
b1010001 L
b10101 ,
b10101 4
b10101 ;
b10101 K
01
12
#23
11
#24
01
02
#25
11
#26
0#
0"
0!
01
12
#27
11
#28
01
02
#29
11
#30
b11111111 I
b11111111 <
b110111 A
0(
01
12
